
LAB03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002704  08002704  00003704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002728  08002728  00004054  2**0
                  CONTENTS
  4 .ARM          00000000  08002728  08002728  00004054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002728  08002728  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002728  08002728  00003728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800272c  0800272c  0000372c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002730  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000054  08002784  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002784  00004168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008402  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b70  00000000  00000000  0000c47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0000dff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079f  00000000  00000000  0000ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b8e  00000000  00000000  0000f19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bac0  00000000  00000000  00025d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082527  00000000  00000000  000317ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3d14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000b3d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b652c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ec 	.word	0x080026ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080026ec 	.word	0x080026ec

0800014c <isButtonPressed>:

int TimeOutForKeyPress[NUM_BUTTON] = {100, 100, 100};
int button_long_pressed[10];
int button_flag[10];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000070 	.word	0x20000070

08000180 <getKeyInput>:
void subKeyProcess(){
	//TODO
//	button1_flag = 1;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; ++i) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e090      	b.n	80002ae <getKeyInput+0x12e>
		KeyReg0[i] = KeyReg1[i];
 800018c:	4a4c      	ldr	r2, [pc, #304]	@ (80002c0 <getKeyInput+0x140>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	494b      	ldr	r1, [pc, #300]	@ (80002c4 <getKeyInput+0x144>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800019c:	4a4a      	ldr	r2, [pc, #296]	@ (80002c8 <getKeyInput+0x148>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4946      	ldr	r1, [pc, #280]	@ (80002c0 <getKeyInput+0x140>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	d01b      	beq.n	80001ea <getKeyInput+0x6a>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dc21      	bgt.n	80001fc <getKeyInput+0x7c>
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d003      	beq.n	80001c6 <getKeyInput+0x46>
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d009      	beq.n	80001d8 <getKeyInput+0x58>
 80001c4:	e01a      	b.n	80001fc <getKeyInput+0x7c>
		case 0:
			KeyReg2[0] = HAL_GPIO_ReadPin(MODULE_GPIO_Port, MODULE_Pin);
 80001c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ca:	4840      	ldr	r0, [pc, #256]	@ (80002cc <getKeyInput+0x14c>)
 80001cc:	f001 fa60 	bl	8001690 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b3c      	ldr	r3, [pc, #240]	@ (80002c8 <getKeyInput+0x148>)
 80001d6:	601a      	str	r2, [r3, #0]
		case 1:
			KeyReg2[1] = HAL_GPIO_ReadPin(TIME_GPIO_Port, TIME_Pin);
 80001d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001dc:	483c      	ldr	r0, [pc, #240]	@ (80002d0 <getKeyInput+0x150>)
 80001de:	f001 fa57 	bl	8001690 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b38      	ldr	r3, [pc, #224]	@ (80002c8 <getKeyInput+0x148>)
 80001e8:	605a      	str	r2, [r3, #4]
		case 2:
			KeyReg2[2] = HAL_GPIO_ReadPin(VALUE_GPIO_Port, VALUE_Pin);
 80001ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001ee:	4838      	ldr	r0, [pc, #224]	@ (80002d0 <getKeyInput+0x150>)
 80001f0:	f001 fa4e 	bl	8001690 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b33      	ldr	r3, [pc, #204]	@ (80002c8 <getKeyInput+0x148>)
 80001fa:	609a      	str	r2, [r3, #8]
		}

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001fc:	4a31      	ldr	r2, [pc, #196]	@ (80002c4 <getKeyInput+0x144>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	492e      	ldr	r1, [pc, #184]	@ (80002c0 <getKeyInput+0x140>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d14b      	bne.n	80002a8 <getKeyInput+0x128>
 8000210:	4a2b      	ldr	r2, [pc, #172]	@ (80002c0 <getKeyInput+0x140>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	492b      	ldr	r1, [pc, #172]	@ (80002c8 <getKeyInput+0x148>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d141      	bne.n	80002a8 <getKeyInput+0x128>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000224:	4a2b      	ldr	r2, [pc, #172]	@ (80002d4 <getKeyInput+0x154>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4926      	ldr	r1, [pc, #152]	@ (80002c8 <getKeyInput+0x148>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d018      	beq.n	800026a <getKeyInput+0xea>
				KeyReg3[i] = KeyReg2[i];
 8000238:	4a23      	ldr	r2, [pc, #140]	@ (80002c8 <getKeyInput+0x148>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4924      	ldr	r1, [pc, #144]	@ (80002d4 <getKeyInput+0x154>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000248:	4a1f      	ldr	r2, [pc, #124]	@ (80002c8 <getKeyInput+0x148>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d129      	bne.n	80002a8 <getKeyInput+0x128>
					TimeOutForKeyPress[i] = 100;
 8000254:	4a20      	ldr	r2, [pc, #128]	@ (80002d8 <getKeyInput+0x158>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2164      	movs	r1, #100	@ 0x64
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 800025e:	4a1f      	ldr	r2, [pc, #124]	@ (80002dc <getKeyInput+0x15c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2101      	movs	r1, #1
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000268:	e01e      	b.n	80002a8 <getKeyInput+0x128>
				}
			}
			else {
				--TimeOutForKeyPress[i];
 800026a:	4a1b      	ldr	r2, [pc, #108]	@ (80002d8 <getKeyInput+0x158>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	1e5a      	subs	r2, r3, #1
 8000274:	4918      	ldr	r1, [pc, #96]	@ (80002d8 <getKeyInput+0x158>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800027c:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <getKeyInput+0x158>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10f      	bne.n	80002a8 <getKeyInput+0x128>
					if (KeyReg2[i] == PRESSED_STATE) {
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <getKeyInput+0x148>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <getKeyInput+0x11e>
						button_flag[i] = 1;
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <getKeyInput+0x15c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2101      	movs	r1, #1
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					TimeOutForKeyPress[i] = 25;
 800029e:	4a0e      	ldr	r2, [pc, #56]	@ (80002d8 <getKeyInput+0x158>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2119      	movs	r1, #25
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTON; ++i) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	f77f af6b 	ble.w	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000000c 	.word	0x2000000c
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000018 	.word	0x20000018
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	20000024 	.word	0x20000024
 80002d8:	20000030 	.word	0x20000030
 80002dc:	20000070 	.word	0x20000070

080002e0 <fsm_traffic_light_run>:

int TIME_RED_tmp = 0;
int TIME_AMBER_tmp = 0;
int TIME_GREEN_tmp = 0;

void fsm_traffic_light_run() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	switch (status) {
 80002e4:	4bae      	ldr	r3, [pc, #696]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	2b07      	cmp	r3, #7
 80002ec:	f200 8268 	bhi.w	80007c0 <fsm_traffic_light_run+0x4e0>
 80002f0:	a201      	add	r2, pc, #4	@ (adr r2, 80002f8 <fsm_traffic_light_run+0x18>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000319 	.word	0x08000319
 80002fc:	0800032d 	.word	0x0800032d
 8000300:	080003d3 	.word	0x080003d3
 8000304:	08000467 	.word	0x08000467
 8000308:	0800050d 	.word	0x0800050d
 800030c:	080005c5 	.word	0x080005c5
 8000310:	08000661 	.word	0x08000661
 8000314:	080006fd 	.word	0x080006fd
	case INIT:
		status = RED_GREEN;
 8000318:	4ba1      	ldr	r3, [pc, #644]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 800031a:	2202      	movs	r2, #2
 800031c:	601a      	str	r2, [r3, #0]
		setTimer(0, TIME_GREEN);
 800031e:	4ba1      	ldr	r3, [pc, #644]	@ (80005a4 <fsm_traffic_light_run+0x2c4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4619      	mov	r1, r3
 8000324:	2000      	movs	r0, #0
 8000326:	f000 fda5 	bl	8000e74 <setTimer>
		break;
 800032a:	e258      	b.n	80007de <fsm_traffic_light_run+0x4fe>
	case RED_GREEN:
		value = timer_counter[0] + TIME_YELLOW / 10;
 800032c:	4b9e      	ldr	r3, [pc, #632]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	4b9e      	ldr	r3, [pc, #632]	@ (80005ac <fsm_traffic_light_run+0x2cc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	499e      	ldr	r1, [pc, #632]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 8000336:	fb81 0103 	smull	r0, r1, r1, r3
 800033a:	1089      	asrs	r1, r1, #2
 800033c:	17db      	asrs	r3, r3, #31
 800033e:	1acb      	subs	r3, r1, r3
 8000340:	4413      	add	r3, r2
 8000342:	4a9c      	ldr	r2, [pc, #624]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 8000344:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 8000346:	4b98      	ldr	r3, [pc, #608]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a9b      	ldr	r2, [pc, #620]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 800034c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_YELLOW_OP_Pin, 1);
 800034e:	2201      	movs	r2, #1
 8000350:	21cc      	movs	r1, #204	@ 0xcc
 8000352:	489a      	ldr	r0, [pc, #616]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 8000354:	f001 f9b3 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_OP_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2130      	movs	r1, #48	@ 0x30
 800035c:	4897      	ldr	r0, [pc, #604]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 800035e:	f001 f9ae 	bl	80016be <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fda6 	bl	8000eb4 <isTimerExpired>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d108      	bne.n	8000380 <fsm_traffic_light_run+0xa0>
			status = RED_YELLOW;
 800036e:	4b8c      	ldr	r3, [pc, #560]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 8000370:	2203      	movs	r2, #3
 8000372:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 8000374:	4b8d      	ldr	r3, [pc, #564]	@ (80005ac <fsm_traffic_light_run+0x2cc>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4619      	mov	r1, r3
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fd7a 	bl	8000e74 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff fee3 	bl	800014c <isButtonPressed>
 8000386:	4603      	mov	r3, r0
 8000388:	2b01      	cmp	r3, #1
 800038a:	d117      	bne.n	80003bc <fsm_traffic_light_run+0xdc>
			status = MOD_RED;
 800038c:	4b84      	ldr	r3, [pc, #528]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 800038e:	2206      	movs	r2, #6
 8000390:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000392:	f000 fbff 	bl	8000b94 <clearAllClock>
			value = TIME_RED / 10;
 8000396:	4b8a      	ldr	r3, [pc, #552]	@ (80005c0 <fsm_traffic_light_run+0x2e0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a85      	ldr	r2, [pc, #532]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 800039c:	fb82 1203 	smull	r1, r2, r2, r3
 80003a0:	1092      	asrs	r2, r2, #2
 80003a2:	17db      	asrs	r3, r3, #31
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	4a83      	ldr	r2, [pc, #524]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 80003a8:	6013      	str	r3, [r2, #0]
			value1 = 200;
 80003aa:	4b83      	ldr	r3, [pc, #524]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 80003ac:	22c8      	movs	r2, #200	@ 0xc8
 80003ae:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 80003b0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003b4:	2000      	movs	r0, #0
 80003b6:	f000 fd5d 	bl	8000e74 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 80003ba:	e203      	b.n	80007c4 <fsm_traffic_light_run+0x4e4>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff fec5 	bl	800014c <isButtonPressed>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	f000 81fd 	beq.w	80007c4 <fsm_traffic_light_run+0x4e4>
 80003ca:	2002      	movs	r0, #2
 80003cc:	f7ff febe 	bl	800014c <isButtonPressed>
		break;
 80003d0:	e1f8      	b.n	80007c4 <fsm_traffic_light_run+0x4e4>
	case RED_YELLOW:
		value = timer_counter[0];
 80003d2:	4b75      	ldr	r3, [pc, #468]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a77      	ldr	r2, [pc, #476]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 80003d8:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80003da:	4b73      	ldr	r3, [pc, #460]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a76      	ldr	r2, [pc, #472]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 80003e0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_GREEN_OP_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	21d4      	movs	r1, #212	@ 0xd4
 80003e6:	4875      	ldr	r0, [pc, #468]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 80003e8:	f001 f969 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_OP_Pin, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2128      	movs	r1, #40	@ 0x28
 80003f0:	4872      	ldr	r0, [pc, #456]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 80003f2:	f001 f964 	bl	80016be <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 fd5c 	bl	8000eb4 <isTimerExpired>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d108      	bne.n	8000414 <fsm_traffic_light_run+0x134>
			status = GREEN_RED;
 8000402:	4b67      	ldr	r3, [pc, #412]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 8000404:	2204      	movs	r2, #4
 8000406:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 8000408:	4b66      	ldr	r3, [pc, #408]	@ (80005a4 <fsm_traffic_light_run+0x2c4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fd30 	bl	8000e74 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff fe99 	bl	800014c <isButtonPressed>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d117      	bne.n	8000450 <fsm_traffic_light_run+0x170>
			status = MOD_RED;
 8000420:	4b5f      	ldr	r3, [pc, #380]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 8000422:	2206      	movs	r2, #6
 8000424:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000426:	f000 fbb5 	bl	8000b94 <clearAllClock>
			value = TIME_RED / 10;
 800042a:	4b65      	ldr	r3, [pc, #404]	@ (80005c0 <fsm_traffic_light_run+0x2e0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a60      	ldr	r2, [pc, #384]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 8000430:	fb82 1203 	smull	r1, r2, r2, r3
 8000434:	1092      	asrs	r2, r2, #2
 8000436:	17db      	asrs	r3, r3, #31
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a5e      	ldr	r2, [pc, #376]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 800043c:	6013      	str	r3, [r2, #0]
			value1 = 200;
 800043e:	4b5e      	ldr	r3, [pc, #376]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 8000440:	22c8      	movs	r2, #200	@ 0xc8
 8000442:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000444:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000448:	2000      	movs	r0, #0
 800044a:	f000 fd13 	bl	8000e74 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 800044e:	e1bb      	b.n	80007c8 <fsm_traffic_light_run+0x4e8>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff fe7b 	bl	800014c <isButtonPressed>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	f000 81b5 	beq.w	80007c8 <fsm_traffic_light_run+0x4e8>
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff fe74 	bl	800014c <isButtonPressed>
		break;
 8000464:	e1b0      	b.n	80007c8 <fsm_traffic_light_run+0x4e8>
	case GREEN_RED:
		value = timer_counter[0];
 8000466:	4b50      	ldr	r3, [pc, #320]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a52      	ldr	r2, [pc, #328]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 800046c:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0] + TIME_YELLOW / 10;
 800046e:	4b4e      	ldr	r3, [pc, #312]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b4e      	ldr	r3, [pc, #312]	@ (80005ac <fsm_traffic_light_run+0x2cc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	494e      	ldr	r1, [pc, #312]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 8000478:	fb81 0103 	smull	r0, r1, r1, r3
 800047c:	1089      	asrs	r1, r1, #2
 800047e:	17db      	asrs	r3, r3, #31
 8000480:	1acb      	subs	r3, r1, r3
 8000482:	4413      	add	r3, r2
 8000484:	4a4c      	ldr	r2, [pc, #304]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 8000486:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	2178      	movs	r1, #120	@ 0x78
 800048c:	484b      	ldr	r0, [pc, #300]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 800048e:	f001 f916 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin | LED_RED_OP_Pin, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2184      	movs	r1, #132	@ 0x84
 8000496:	4849      	ldr	r0, [pc, #292]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 8000498:	f001 f911 	bl	80016be <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fd09 	bl	8000eb4 <isTimerExpired>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d108      	bne.n	80004ba <fsm_traffic_light_run+0x1da>
			status = YELLOW_RED;
 80004a8:	4b3d      	ldr	r3, [pc, #244]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 80004aa:	2205      	movs	r2, #5
 80004ac:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 80004ae:	4b3f      	ldr	r3, [pc, #252]	@ (80005ac <fsm_traffic_light_run+0x2cc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4619      	mov	r1, r3
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fcdd 	bl	8000e74 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff fe46 	bl	800014c <isButtonPressed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d117      	bne.n	80004f6 <fsm_traffic_light_run+0x216>
			value = TIME_RED / 10;
 80004c6:	4b3e      	ldr	r3, [pc, #248]	@ (80005c0 <fsm_traffic_light_run+0x2e0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a39      	ldr	r2, [pc, #228]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 80004cc:	fb82 1203 	smull	r1, r2, r2, r3
 80004d0:	1092      	asrs	r2, r2, #2
 80004d2:	17db      	asrs	r3, r3, #31
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	4a37      	ldr	r2, [pc, #220]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 80004d8:	6013      	str	r3, [r2, #0]
			value1 = 200;
 80004da:	4b37      	ldr	r3, [pc, #220]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 80004dc:	22c8      	movs	r2, #200	@ 0xc8
 80004de:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 80004e0:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80004e6:	f000 fb55 	bl	8000b94 <clearAllClock>
			setTimer(0, 500);
 80004ea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fcc0 	bl	8000e74 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 80004f4:	e16a      	b.n	80007cc <fsm_traffic_light_run+0x4ec>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff fe28 	bl	800014c <isButtonPressed>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	f000 8164 	beq.w	80007cc <fsm_traffic_light_run+0x4ec>
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe21 	bl	800014c <isButtonPressed>
		break;
 800050a:	e15f      	b.n	80007cc <fsm_traffic_light_run+0x4ec>
	case YELLOW_RED:
		value = timer_counter[0];
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a28      	ldr	r2, [pc, #160]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 8000512:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 8000514:	4b24      	ldr	r3, [pc, #144]	@ (80005a8 <fsm_traffic_light_run+0x2c8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a27      	ldr	r2, [pc, #156]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 800051a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	21b8      	movs	r1, #184	@ 0xb8
 8000520:	4826      	ldr	r0, [pc, #152]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 8000522:	f001 f8cc 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_RED_OP_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2144      	movs	r1, #68	@ 0x44
 800052a:	4824      	ldr	r0, [pc, #144]	@ (80005bc <fsm_traffic_light_run+0x2dc>)
 800052c:	f001 f8c7 	bl	80016be <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fcbf 	bl	8000eb4 <isTimerExpired>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d108      	bne.n	800054e <fsm_traffic_light_run+0x26e>
			status = RED_GREEN;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <fsm_traffic_light_run+0x2c4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4619      	mov	r1, r3
 8000548:	2000      	movs	r0, #0
 800054a:	f000 fc93 	bl	8000e74 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fdfc 	bl	800014c <isButtonPressed>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d117      	bne.n	800058a <fsm_traffic_light_run+0x2aa>
			value = TIME_RED / 10;
 800055a:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <fsm_traffic_light_run+0x2e0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <fsm_traffic_light_run+0x2d0>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1092      	asrs	r2, r2, #2
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <fsm_traffic_light_run+0x2d4>)
 800056c:	6013      	str	r3, [r2, #0]
			value1 = 200;
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <fsm_traffic_light_run+0x2d8>)
 8000570:	22c8      	movs	r2, #200	@ 0xc8
 8000572:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <fsm_traffic_light_run+0x2c0>)
 8000576:	2206      	movs	r2, #6
 8000578:	601a      	str	r2, [r3, #0]
			clearAllClock();
 800057a:	f000 fb0b 	bl	8000b94 <clearAllClock>
			setTimer(0, 500);
 800057e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fc76 	bl	8000e74 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 8000588:	e122      	b.n	80007d0 <fsm_traffic_light_run+0x4f0>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	f000 811c 	beq.w	80007d0 <fsm_traffic_light_run+0x4f0>
 8000598:	2002      	movs	r0, #2
 800059a:	f7ff fdd7 	bl	800014c <isButtonPressed>
		break;
 800059e:	e117      	b.n	80007d0 <fsm_traffic_light_run+0x4f0>
 80005a0:	200000a4 	.word	0x200000a4
 80005a4:	20000044 	.word	0x20000044
 80005a8:	2000010c 	.word	0x2000010c
 80005ac:	20000040 	.word	0x20000040
 80005b0:	66666667 	.word	0x66666667
 80005b4:	200000a8 	.word	0x200000a8
 80005b8:	200000ac 	.word	0x200000ac
 80005bc:	40010800 	.word	0x40010800
 80005c0:	2000003c 	.word	0x2000003c
	case MOD_RED:
		if (isTimerExpired(0) == 1) {
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fc75 	bl	8000eb4 <isTimerExpired>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d108      	bne.n	80005e2 <fsm_traffic_light_run+0x302>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin | LED_RED_OP_Pin);
 80005d0:	2124      	movs	r1, #36	@ 0x24
 80005d2:	4884      	ldr	r0, [pc, #528]	@ (80007e4 <fsm_traffic_light_run+0x504>)
 80005d4:	f001 f88b 	bl	80016ee <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 80005d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fc49 	bl	8000e74 <setTimer>
		}
		if (isButtonPressed(1) == 1) {
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fdb2 	bl	800014c <isButtonPressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10d      	bne.n	800060a <fsm_traffic_light_run+0x32a>
			value = (value >= 9900) ? 100 : value + 100;
 80005ee:	4b7e      	ldr	r3, [pc, #504]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f242 62ab 	movw	r2, #9899	@ 0x26ab
 80005f6:	4293      	cmp	r3, r2
 80005f8:	dc03      	bgt.n	8000602 <fsm_traffic_light_run+0x322>
 80005fa:	4b7b      	ldr	r3, [pc, #492]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3364      	adds	r3, #100	@ 0x64
 8000600:	e000      	b.n	8000604 <fsm_traffic_light_run+0x324>
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	4a78      	ldr	r2, [pc, #480]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000606:	6013      	str	r3, [r2, #0]
			clearAllClock();
			value = TIME_YELLOW / 10;
			value1 = 300;
			setTimer(0, 500);
		}
		break;
 8000608:	e0e4      	b.n	80007d4 <fsm_traffic_light_run+0x4f4>
		else if (isButtonPressed(2) == 1) {
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff fd9e 	bl	800014c <isButtonPressed>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d104      	bne.n	8000620 <fsm_traffic_light_run+0x340>
			TIME_RED_tmp = value;
 8000616:	4b74      	ldr	r3, [pc, #464]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a74      	ldr	r2, [pc, #464]	@ (80007ec <fsm_traffic_light_run+0x50c>)
 800061c:	6013      	str	r3, [r2, #0]
		break;
 800061e:	e0d9      	b.n	80007d4 <fsm_traffic_light_run+0x4f4>
		else if (isButtonPressed(0) == 1) {
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fd93 	bl	800014c <isButtonPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	f040 80d3 	bne.w	80007d4 <fsm_traffic_light_run+0x4f4>
			status = MOD_AMBER;
 800062e:	4b70      	ldr	r3, [pc, #448]	@ (80007f0 <fsm_traffic_light_run+0x510>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000634:	f000 faae 	bl	8000b94 <clearAllClock>
			value = TIME_YELLOW / 10;
 8000638:	4b6e      	ldr	r3, [pc, #440]	@ (80007f4 <fsm_traffic_light_run+0x514>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a6e      	ldr	r2, [pc, #440]	@ (80007f8 <fsm_traffic_light_run+0x518>)
 800063e:	fb82 1203 	smull	r1, r2, r2, r3
 8000642:	1092      	asrs	r2, r2, #2
 8000644:	17db      	asrs	r3, r3, #31
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	4a67      	ldr	r2, [pc, #412]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 800064a:	6013      	str	r3, [r2, #0]
			value1 = 300;
 800064c:	4b6b      	ldr	r3, [pc, #428]	@ (80007fc <fsm_traffic_light_run+0x51c>)
 800064e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000652:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000654:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fc0b 	bl	8000e74 <setTimer>
		break;
 800065e:	e0b9      	b.n	80007d4 <fsm_traffic_light_run+0x4f4>
	case MOD_AMBER:
		if (isTimerExpired(0) == 1) {
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fc27 	bl	8000eb4 <isTimerExpired>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	d108      	bne.n	800067e <fsm_traffic_light_run+0x39e>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin | LED_YELLOW_OP_Pin);
 800066c:	2148      	movs	r1, #72	@ 0x48
 800066e:	485d      	ldr	r0, [pc, #372]	@ (80007e4 <fsm_traffic_light_run+0x504>)
 8000670:	f001 f83d 	bl	80016ee <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000674:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fbfb 	bl	8000e74 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fd64 	bl	800014c <isButtonPressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d10d      	bne.n	80006a6 <fsm_traffic_light_run+0x3c6>
			value = (value >= 9900) ? 100 : value + 100;
 800068a:	4b57      	ldr	r3, [pc, #348]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f242 62ab 	movw	r2, #9899	@ 0x26ab
 8000692:	4293      	cmp	r3, r2
 8000694:	dc03      	bgt.n	800069e <fsm_traffic_light_run+0x3be>
 8000696:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3364      	adds	r3, #100	@ 0x64
 800069c:	e000      	b.n	80006a0 <fsm_traffic_light_run+0x3c0>
 800069e:	2364      	movs	r3, #100	@ 0x64
 80006a0:	4a51      	ldr	r2, [pc, #324]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 80006a2:	6013      	str	r3, [r2, #0]
			clearAllClock();
			value = TIME_GREEN / 10;
			value1 = 400;
			setTimer(0, 500);
		}
		break;
 80006a4:	e098      	b.n	80007d8 <fsm_traffic_light_run+0x4f8>
		else if (isButtonPressed(2) == 1) {
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff fd50 	bl	800014c <isButtonPressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d104      	bne.n	80006bc <fsm_traffic_light_run+0x3dc>
			TIME_AMBER_tmp = value;
 80006b2:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <fsm_traffic_light_run+0x520>)
 80006b8:	6013      	str	r3, [r2, #0]
		break;
 80006ba:	e08d      	b.n	80007d8 <fsm_traffic_light_run+0x4f8>
		else if (isButtonPressed(0) == 1) {
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fd45 	bl	800014c <isButtonPressed>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	f040 8087 	bne.w	80007d8 <fsm_traffic_light_run+0x4f8>
			status = MOD_GREEN;
 80006ca:	4b49      	ldr	r3, [pc, #292]	@ (80007f0 <fsm_traffic_light_run+0x510>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80006d0:	f000 fa60 	bl	8000b94 <clearAllClock>
			value = TIME_GREEN / 10;
 80006d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000804 <fsm_traffic_light_run+0x524>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a47      	ldr	r2, [pc, #284]	@ (80007f8 <fsm_traffic_light_run+0x518>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1092      	asrs	r2, r2, #2
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 80006e6:	6013      	str	r3, [r2, #0]
			value1 = 400;
 80006e8:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <fsm_traffic_light_run+0x51c>)
 80006ea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80006ee:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 80006f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fbbd 	bl	8000e74 <setTimer>
		break;
 80006fa:	e06d      	b.n	80007d8 <fsm_traffic_light_run+0x4f8>
	case MOD_GREEN:
		if (isTimerExpired(0) == 1) {
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fbd9 	bl	8000eb4 <isTimerExpired>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d108      	bne.n	800071a <fsm_traffic_light_run+0x43a>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin | LED_GREEN_OP_Pin);
 8000708:	2190      	movs	r1, #144	@ 0x90
 800070a:	4836      	ldr	r0, [pc, #216]	@ (80007e4 <fsm_traffic_light_run+0x504>)
 800070c:	f000 ffef 	bl	80016ee <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000710:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fbad 	bl	8000e74 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10d      	bne.n	8000742 <fsm_traffic_light_run+0x462>
			value = (value >= 9900) ? 100 : value + 100;
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f242 62ab 	movw	r2, #9899	@ 0x26ab
 800072e:	4293      	cmp	r3, r2
 8000730:	dc03      	bgt.n	800073a <fsm_traffic_light_run+0x45a>
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3364      	adds	r3, #100	@ 0x64
 8000738:	e000      	b.n	800073c <fsm_traffic_light_run+0x45c>
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 800073e:	6013      	str	r3, [r2, #0]
		}
		else if (isButtonPressed(0) == 1) {
			status = RED_GREEN;
			setTimer(0, TIME_GREEN);
		}
		break;
 8000740:	e04c      	b.n	80007dc <fsm_traffic_light_run+0x4fc>
		else if (isButtonPressed(2) == 1) {
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff fd02 	bl	800014c <isButtonPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d128      	bne.n	80007a0 <fsm_traffic_light_run+0x4c0>
			TIME_GREEN_tmp = value;
 800074e:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <fsm_traffic_light_run+0x508>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <fsm_traffic_light_run+0x528>)
 8000754:	6013      	str	r3, [r2, #0]
			if (TIME_GREEN_tmp + TIME_AMBER_tmp == TIME_RED_tmp) {
 8000756:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <fsm_traffic_light_run+0x528>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <fsm_traffic_light_run+0x520>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	441a      	add	r2, r3
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <fsm_traffic_light_run+0x50c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d139      	bne.n	80007dc <fsm_traffic_light_run+0x4fc>
				TIME_GREEN = TIME_GREEN_tmp * 10;
 8000768:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <fsm_traffic_light_run+0x528>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <fsm_traffic_light_run+0x524>)
 8000778:	601a      	str	r2, [r3, #0]
				TIME_YELLOW = TIME_AMBER_tmp * 10;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <fsm_traffic_light_run+0x520>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	461a      	mov	r2, r3
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <fsm_traffic_light_run+0x514>)
 800078a:	601a      	str	r2, [r3, #0]
				TIME_RED = TIME_RED_tmp * 10;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <fsm_traffic_light_run+0x50c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	461a      	mov	r2, r3
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <fsm_traffic_light_run+0x52c>)
 800079c:	601a      	str	r2, [r3, #0]
		break;
 800079e:	e01d      	b.n	80007dc <fsm_traffic_light_run+0x4fc>
		else if (isButtonPressed(0) == 1) {
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fcd3 	bl	800014c <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d117      	bne.n	80007dc <fsm_traffic_light_run+0x4fc>
			status = RED_GREEN;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <fsm_traffic_light_run+0x510>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <fsm_traffic_light_run+0x524>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fb5b 	bl	8000e74 <setTimer>
		break;
 80007be:	e00d      	b.n	80007dc <fsm_traffic_light_run+0x4fc>
	default:
		break;
 80007c0:	bf00      	nop
 80007c2:	e00c      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007c4:	bf00      	nop
 80007c6:	e00a      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007c8:	bf00      	nop
 80007ca:	e008      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007cc:	bf00      	nop
 80007ce:	e006      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007d0:	bf00      	nop
 80007d2:	e004      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007d4:	bf00      	nop
 80007d6:	e002      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <fsm_traffic_light_run+0x4fe>
		break;
 80007dc:	bf00      	nop
	}
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	20000098 	.word	0x20000098
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	20000040 	.word	0x20000040
 80007f8:	66666667 	.word	0x66666667
 80007fc:	200000ac 	.word	0x200000ac
 8000800:	2000009c 	.word	0x2000009c
 8000804:	20000044 	.word	0x20000044
 8000808:	200000a0 	.word	0x200000a0
 800080c:	2000003c 	.word	0x2000003c

08000810 <display7SEG>:
#include "led7_segment.h"

int index_led = 0;
int led_buffer[4];

void display7SEG(int num) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b09      	cmp	r3, #9
 800081c:	d87f      	bhi.n	800091e <display7SEG+0x10e>
 800081e:	a201      	add	r2, pc, #4	@ (adr r2, 8000824 <display7SEG+0x14>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	0800084d 	.word	0x0800084d
 8000828:	08000863 	.word	0x08000863
 800082c:	08000879 	.word	0x08000879
 8000830:	0800088f 	.word	0x0800088f
 8000834:	080008a5 	.word	0x080008a5
 8000838:	080008bb 	.word	0x080008bb
 800083c:	080008d1 	.word	0x080008d1
 8000840:	080008e7 	.word	0x080008e7
 8000844:	080008fd 	.word	0x080008fd
 8000848:	08000909 	.word	0x08000909
	case 0:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin,
 800084c:	2200      	movs	r2, #0
 800084e:	213f      	movs	r1, #63	@ 0x3f
 8000850:	4835      	ldr	r0, [pc, #212]	@ (8000928 <display7SEG+0x118>)
 8000852:	f000 ff34 	bl	80016be <HAL_GPIO_WritePin>
				0);
		HAL_GPIO_WritePin(GPIOB, g_Pin, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4833      	ldr	r0, [pc, #204]	@ (8000928 <display7SEG+0x118>)
 800085c:	f000 ff2f 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000860:	e05d      	b.n	800091e <display7SEG+0x10e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2106      	movs	r1, #6
 8000866:	4830      	ldr	r0, [pc, #192]	@ (8000928 <display7SEG+0x118>)
 8000868:	f000 ff29 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	2179      	movs	r1, #121	@ 0x79
 8000870:	482d      	ldr	r0, [pc, #180]	@ (8000928 <display7SEG+0x118>)
 8000872:	f000 ff24 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000876:	e052      	b.n	800091e <display7SEG+0x10e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | d_Pin | e_Pin | g_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	215b      	movs	r1, #91	@ 0x5b
 800087c:	482a      	ldr	r0, [pc, #168]	@ (8000928 <display7SEG+0x118>)
 800087e:	f000 ff1e 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c_Pin | f_Pin, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	2124      	movs	r1, #36	@ 0x24
 8000886:	4828      	ldr	r0, [pc, #160]	@ (8000928 <display7SEG+0x118>)
 8000888:	f000 ff19 	bl	80016be <HAL_GPIO_WritePin>
		break;
 800088c:	e047      	b.n	800091e <display7SEG+0x10e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | g_Pin, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	214f      	movs	r1, #79	@ 0x4f
 8000892:	4825      	ldr	r0, [pc, #148]	@ (8000928 <display7SEG+0x118>)
 8000894:	f000 ff13 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e_Pin | f_Pin, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2130      	movs	r1, #48	@ 0x30
 800089c:	4822      	ldr	r0, [pc, #136]	@ (8000928 <display7SEG+0x118>)
 800089e:	f000 ff0e 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80008a2:	e03c      	b.n	800091e <display7SEG+0x10e>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin | f_Pin | g_Pin, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2166      	movs	r1, #102	@ 0x66
 80008a8:	481f      	ldr	r0, [pc, #124]	@ (8000928 <display7SEG+0x118>)
 80008aa:	f000 ff08 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2119      	movs	r1, #25
 80008b2:	481d      	ldr	r0, [pc, #116]	@ (8000928 <display7SEG+0x118>)
 80008b4:	f000 ff03 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80008b8:	e031      	b.n	800091e <display7SEG+0x10e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | f_Pin | g_Pin, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	216d      	movs	r1, #109	@ 0x6d
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <display7SEG+0x118>)
 80008c0:	f000 fefd 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b_Pin | e_Pin, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2112      	movs	r1, #18
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <display7SEG+0x118>)
 80008ca:	f000 fef8 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80008ce:	e026      	b.n	800091e <display7SEG+0x10e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin,
 80008d0:	2200      	movs	r2, #0
 80008d2:	217d      	movs	r1, #125	@ 0x7d
 80008d4:	4814      	ldr	r0, [pc, #80]	@ (8000928 <display7SEG+0x118>)
 80008d6:	f000 fef2 	bl	80016be <HAL_GPIO_WritePin>
				0);
		HAL_GPIO_WritePin(GPIOB, b_Pin, 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	2102      	movs	r1, #2
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <display7SEG+0x118>)
 80008e0:	f000 feed 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80008e4:	e01b      	b.n	800091e <display7SEG+0x10e>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2107      	movs	r1, #7
 80008ea:	480f      	ldr	r0, [pc, #60]	@ (8000928 <display7SEG+0x118>)
 80008ec:	f000 fee7 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d_Pin | e_Pin | f_Pin | g_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2178      	movs	r1, #120	@ 0x78
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <display7SEG+0x118>)
 80008f6:	f000 fee2 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80008fa:	e010      	b.n	800091e <display7SEG+0x10e>
	case 8:
		HAL_GPIO_WritePin(GPIOB,
 80008fc:	2200      	movs	r2, #0
 80008fe:	217f      	movs	r1, #127	@ 0x7f
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <display7SEG+0x118>)
 8000902:	f000 fedc 	bl	80016be <HAL_GPIO_WritePin>
				a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 0);
		break;
 8000906:	e00a      	b.n	800091e <display7SEG+0x10e>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin,
 8000908:	2200      	movs	r2, #0
 800090a:	216f      	movs	r1, #111	@ 0x6f
 800090c:	4806      	ldr	r0, [pc, #24]	@ (8000928 <display7SEG+0x118>)
 800090e:	f000 fed6 	bl	80016be <HAL_GPIO_WritePin>
				0);
		HAL_GPIO_WritePin(GPIOB, e_Pin, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <display7SEG+0x118>)
 8000918:	f000 fed1 	bl	80016be <HAL_GPIO_WritePin>
		break;
 800091c:	bf00      	nop
	}
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010c00 	.word	0x40010c00

0800092c <display7SEG_2>:

void display7SEG_2(int num) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b09      	cmp	r3, #9
 8000938:	f200 8094 	bhi.w	8000a64 <display7SEG_2+0x138>
 800093c:	a201      	add	r2, pc, #4	@ (adr r2, 8000944 <display7SEG_2+0x18>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	0800096d 	.word	0x0800096d
 8000948:	08000987 	.word	0x08000987
 800094c:	080009a1 	.word	0x080009a1
 8000950:	080009bb 	.word	0x080009bb
 8000954:	080009d5 	.word	0x080009d5
 8000958:	080009ef 	.word	0x080009ef
 800095c:	08000a09 	.word	0x08000a09
 8000960:	08000a23 	.word	0x08000a23
 8000964:	08000a3d 	.word	0x08000a3d
 8000968:	08000a4b 	.word	0x08000a4b
	case 0:
		HAL_GPIO_WritePin(GPIOB,
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 51fc 	mov.w	r1, #8064	@ 0x1f80
 8000972:	483e      	ldr	r0, [pc, #248]	@ (8000a6c <display7SEG_2+0x140>)
 8000974:	f000 fea3 	bl	80016be <HAL_GPIO_WritePin>
				a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, g2_Pin, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097e:	483b      	ldr	r0, [pc, #236]	@ (8000a6c <display7SEG_2+0x140>)
 8000980:	f000 fe9d 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000984:	e06e      	b.n	8000a64 <display7SEG_2+0x138>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800098c:	4837      	ldr	r0, [pc, #220]	@ (8000a6c <display7SEG_2+0x140>)
 800098e:	f000 fe96 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5172 	mov.w	r1, #15488	@ 0x3c80
 8000998:	4834      	ldr	r0, [pc, #208]	@ (8000a6c <display7SEG_2+0x140>)
 800099a:	f000 fe90 	bl	80016be <HAL_GPIO_WritePin>
		break;
 800099e:	e061      	b.n	8000a64 <display7SEG_2+0x138>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | d2_Pin | e2_Pin | g2_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 80009a6:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <display7SEG_2+0x140>)
 80009a8:	f000 fe89 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c2_Pin | f2_Pin, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 80009b2:	482e      	ldr	r0, [pc, #184]	@ (8000a6c <display7SEG_2+0x140>)
 80009b4:	f000 fe83 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80009b8:	e054      	b.n	8000a64 <display7SEG_2+0x138>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | g2_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 511e 	mov.w	r1, #10112	@ 0x2780
 80009c0:	482a      	ldr	r0, [pc, #168]	@ (8000a6c <display7SEG_2+0x140>)
 80009c2:	f000 fe7c 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e2_Pin | f2_Pin, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80009cc:	4827      	ldr	r0, [pc, #156]	@ (8000a6c <display7SEG_2+0x140>)
 80009ce:	f000 fe76 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80009d2:	e047      	b.n	8000a64 <display7SEG_2+0x138>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin | f2_Pin | g2_Pin, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 514c 	mov.w	r1, #13056	@ 0x3300
 80009da:	4824      	ldr	r0, [pc, #144]	@ (8000a6c <display7SEG_2+0x140>)
 80009dc:	f000 fe6f 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 80009e6:	4821      	ldr	r0, [pc, #132]	@ (8000a6c <display7SEG_2+0x140>)
 80009e8:	f000 fe69 	bl	80016be <HAL_GPIO_WritePin>
		break;
 80009ec:	e03a      	b.n	8000a64 <display7SEG_2+0x138>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 515a 	mov.w	r1, #13952	@ 0x3680
 80009f4:	481d      	ldr	r0, [pc, #116]	@ (8000a6c <display7SEG_2+0x140>)
 80009f6:	f000 fe62 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b2_Pin | e2_Pin, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000a00:	481a      	ldr	r0, [pc, #104]	@ (8000a6c <display7SEG_2+0x140>)
 8000a02:	f000 fe5c 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000a06:	e02d      	b.n	8000a64 <display7SEG_2+0x138>
	case 6:
		HAL_GPIO_WritePin(GPIOB,
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8000a0e:	4817      	ldr	r0, [pc, #92]	@ (8000a6c <display7SEG_2+0x140>)
 8000a10:	f000 fe55 	bl	80016be <HAL_GPIO_WritePin>
				a2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, b2_Pin, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1a:	4814      	ldr	r0, [pc, #80]	@ (8000a6c <display7SEG_2+0x140>)
 8000a1c:	f000 fe4f 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000a20:	e020      	b.n	8000a64 <display7SEG_2+0x138>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000a28:	4810      	ldr	r0, [pc, #64]	@ (8000a6c <display7SEG_2+0x140>)
 8000a2a:	f000 fe48 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <display7SEG_2+0x140>)
 8000a36:	f000 fe42 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000a3a:	e013      	b.n	8000a64 <display7SEG_2+0x138>
	case 8:
		HAL_GPIO_WritePin(GPIOB,
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8000a42:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <display7SEG_2+0x140>)
 8000a44:	f000 fe3b 	bl	80016be <HAL_GPIO_WritePin>
				a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin,
				0);
		break;
 8000a48:	e00c      	b.n	8000a64 <display7SEG_2+0x138>
	case 9:
		HAL_GPIO_WritePin(GPIOB,
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 515e 	mov.w	r1, #14208	@ 0x3780
 8000a50:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <display7SEG_2+0x140>)
 8000a52:	f000 fe34 	bl	80016be <HAL_GPIO_WritePin>
				a2_Pin | b2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, e2_Pin, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <display7SEG_2+0x140>)
 8000a5e:	f000 fe2e 	bl	80016be <HAL_GPIO_WritePin>
		break;
 8000a62:	bf00      	nop
	}
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <update7SEG>:

void update7SEG(int index) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <update7SEG+0x16>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d017      	beq.n	8000ab4 <update7SEG+0x44>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
		display7SEG(led_buffer[1]);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 8000a84:	e02d      	b.n	8000ae2 <update7SEG+0x72>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a8c:	4817      	ldr	r0, [pc, #92]	@ (8000aec <update7SEG+0x7c>)
 8000a8e:	f000 fe16 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a98:	4814      	ldr	r0, [pc, #80]	@ (8000aec <update7SEG+0x7c>)
 8000a9a:	f000 fe10 	bl	80016be <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <update7SEG+0x80>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff feb4 	bl	8000810 <display7SEG>
		display7SEG_2(led_buffer[2]);
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <update7SEG+0x80>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff3d 	bl	800092c <display7SEG_2>
		break;
 8000ab2:	e016      	b.n	8000ae2 <update7SEG+0x72>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aba:	480c      	ldr	r0, [pc, #48]	@ (8000aec <update7SEG+0x7c>)
 8000abc:	f000 fdff 	bl	80016be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac6:	4809      	ldr	r0, [pc, #36]	@ (8000aec <update7SEG+0x7c>)
 8000ac8:	f000 fdf9 	bl	80016be <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <update7SEG+0x80>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe9d 	bl	8000810 <display7SEG>
		display7SEG_2(led_buffer[3]);
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <update7SEG+0x80>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff26 	bl	800092c <display7SEG_2>
		break;
 8000ae0:	bf00      	nop
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800
 8000af0:	200000b4 	.word	0x200000b4

08000af4 <updateClockBuffer>:

void updateClockBuffer() {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	led_buffer[0] = value / 1000;
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <updateClockBuffer+0x88>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <updateClockBuffer+0x8c>)
 8000afe:	fb82 1203 	smull	r1, r2, r2, r3
 8000b02:	1192      	asrs	r2, r2, #6
 8000b04:	17db      	asrs	r3, r3, #31
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <updateClockBuffer+0x90>)
 8000b0a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (value / 100) % 10;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <updateClockBuffer+0x88>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <updateClockBuffer+0x94>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1152      	asrs	r2, r2, #5
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad1      	subs	r1, r2, r3
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <updateClockBuffer+0x98>)
 8000b1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b22:	109a      	asrs	r2, r3, #2
 8000b24:	17cb      	asrs	r3, r1, #31
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1aca      	subs	r2, r1, r3
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <updateClockBuffer+0x90>)
 8000b34:	605a      	str	r2, [r3, #4]
	led_buffer[2] = value1 / 1000;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <updateClockBuffer+0x9c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a11      	ldr	r2, [pc, #68]	@ (8000b80 <updateClockBuffer+0x8c>)
 8000b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b40:	1192      	asrs	r2, r2, #6
 8000b42:	17db      	asrs	r3, r3, #31
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <updateClockBuffer+0x90>)
 8000b48:	6093      	str	r3, [r2, #8]
	led_buffer[3] = (value1 / 100) % 10;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <updateClockBuffer+0x9c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <updateClockBuffer+0x94>)
 8000b50:	fb82 1203 	smull	r1, r2, r2, r3
 8000b54:	1152      	asrs	r2, r2, #5
 8000b56:	17db      	asrs	r3, r3, #31
 8000b58:	1ad1      	subs	r1, r2, r3
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <updateClockBuffer+0x98>)
 8000b5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b60:	109a      	asrs	r2, r3, #2
 8000b62:	17cb      	asrs	r3, r1, #31
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	1aca      	subs	r2, r1, r3
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <updateClockBuffer+0x90>)
 8000b72:	60da      	str	r2, [r3, #12]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	200000a8 	.word	0x200000a8
 8000b80:	10624dd3 	.word	0x10624dd3
 8000b84:	200000b4 	.word	0x200000b4
 8000b88:	51eb851f 	.word	0x51eb851f
 8000b8c:	66666667 	.word	0x66666667
 8000b90:	200000ac 	.word	0x200000ac

08000b94 <clearAllClock>:

void clearAllClock() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <clearAllClock+0x20>)
 8000ba0:	f000 fd8d 	bl	80016be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000baa:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <clearAllClock+0x24>)
 8000bac:	f000 fd87 	bl	80016be <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc0:	f000 fa7a 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f83e 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f000 f8c4 	bl	8000d54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bcc:	f000 f876 	bl	8000cbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bd0:	4817      	ldr	r0, [pc, #92]	@ (8000c30 <main+0x74>)
 8000bd2:	f001 f9d3 	bl	8001f7c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1, 10);
 8000bd6:	210a      	movs	r1, #10
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f000 f94b 	bl	8000e74 <setTimer>
   status = INIT;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <main+0x78>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
    value = 10;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <main+0x7c>)
 8000be6:	220a      	movs	r2, #10
 8000be8:	601a      	str	r2, [r3, #0]
     value1 = 10;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <main+0x80>)
 8000bec:	220a      	movs	r2, #10
 8000bee:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  updateClockBuffer();
 8000bf0:	f7ff ff80 	bl	8000af4 <updateClockBuffer>
	  	  fsm_traffic_light_run();
 8000bf4:	f7ff fb74 	bl	80002e0 <fsm_traffic_light_run>
	  	  if (isTimerExpired(1) == 1) {
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 f95b 	bl	8000eb4 <isTimerExpired>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d1f5      	bne.n	8000bf0 <main+0x34>
	  		  setTimer(1, 100);
 8000c04:	2164      	movs	r1, #100	@ 0x64
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 f934 	bl	8000e74 <setTimer>
	  		  update7SEG(index_led);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <main+0x84>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff2d 	bl	8000a70 <update7SEG>
	  		  ++index_led;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <main+0x84>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <main+0x84>)
 8000c1e:	6013      	str	r3, [r2, #0]
	  		  if (index_led > 1) {
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <main+0x84>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	dde3      	ble.n	8000bf0 <main+0x34>
	  			  index_led = 0;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <main+0x84>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
	  updateClockBuffer();
 8000c2e:	e7df      	b.n	8000bf0 <main+0x34>
 8000c30:	200000c4 	.word	0x200000c4
 8000c34:	200000a4 	.word	0x200000a4
 8000c38:	200000a8 	.word	0x200000a8
 8000c3c:	200000ac 	.word	0x200000ac
 8000c40:	200000b0 	.word	0x200000b0

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b090      	sub	sp, #64	@ 0x40
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fd1e 	bl	8002694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fd50 	bl	8001720 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c86:	f000 f8ef 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 ffbe 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f8db 	bl	8000e68 <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3740      	adds	r7, #64	@ 0x40
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000ce2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000cf0:	2209      	movs	r2, #9
 8000cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d00:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000d02:	f001 f8eb 	bl	8001edc <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d0c:	f000 f8ac 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000d1e:	f001 fa69 	bl	80021f4 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d28:	f000 f89e 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_TIM2_Init+0x94>)
 8000d3a:	f001 fc41 	bl	80025c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f890 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000c4 	.word	0x200000c4

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	4b35      	ldr	r3, [pc, #212]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a34      	ldr	r2, [pc, #208]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a2e      	ldr	r2, [pc, #184]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <MX_GPIO_Init+0xec>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000db0:	2200      	movs	r2, #0
 8000db2:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8000db6:	4823      	ldr	r0, [pc, #140]	@ (8000e44 <MX_GPIO_Init+0xf0>)
 8000db8:	f000 fc81 	bl	80016be <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000dc2:	4821      	ldr	r0, [pc, #132]	@ (8000e48 <MX_GPIO_Init+0xf4>)
 8000dc4:	f000 fc7b 	bl	80016be <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MODULE_Pin */
  GPIO_InitStruct.Pin = MODULE_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODULE_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481b      	ldr	r0, [pc, #108]	@ (8000e4c <MX_GPIO_Init+0xf8>)
 8000dde:	f000 fadb 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_OP_Pin LED_YELLOW_OP_Pin LED_GREEN_OP_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000de2:	f240 73fc 	movw	r3, #2044	@ 0x7fc
 8000de6:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <MX_GPIO_Init+0xf0>)
 8000dfc:	f000 facc 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8000e00:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000e04:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <MX_GPIO_Init+0xf4>)
 8000e1a:	f000 fabd 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_Pin VALUE_Pin */
  GPIO_InitStruct.Pin = TIME_Pin|VALUE_Pin;
 8000e1e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_GPIO_Init+0xf4>)
 8000e34:	f000 fab0 	bl	8001398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000

08000e50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e58:	f000 f846 	bl	8000ee8 <timerRun>
	getKeyInput();
 8000e5c:	f7ff f990 	bl	8000180 <getKeyInput>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value / TIMER_TICK;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <setTimer+0x34>)
 8000e82:	fb82 1203 	smull	r1, r2, r2, r3
 8000e86:	1092      	asrs	r2, r2, #2
 8000e88:	17db      	asrs	r3, r3, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <setTimer+0x38>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <setTimer+0x3c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	66666667 	.word	0x66666667
 8000eac:	2000010c 	.word	0x2000010c
 8000eb0:	20000138 	.word	0x20000138

08000eb4 <isTimerExpired>:

int isTimerExpired(int index) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8000ebc:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <isTimerExpired+0x30>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <isTimerExpired+0x30>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <isTimerExpired+0x24>
	}
	return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000138 	.word	0x20000138

08000ee8 <timerRun>:

void timerRun() {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e01c      	b.n	8000f2e <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8000ef4:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <timerRun+0x58>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd13      	ble.n	8000f28 <timerRun+0x40>
			--timer_counter[i];
 8000f00:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <timerRun+0x58>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <timerRun+0x58>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8000f12:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <timerRun+0x58>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dc04      	bgt.n	8000f28 <timerRun+0x40>
				timer_flag[i] = 1;
 8000f1e:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <timerRun+0x5c>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2101      	movs	r1, #1
 8000f24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	dddf      	ble.n	8000ef4 <timerRun+0xc>
			}
		}
	}
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	2000010c 	.word	0x2000010c
 8000f44:	20000138 	.word	0x20000138

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x60>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_MspInit+0x60>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fbc:	d113      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x44>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f000 f9a5 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe0:	201c      	movs	r0, #28
 8000fe2:	f000 f9be 	bl	8001362 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f87e 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f000 ffdf 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000c4 	.word	0x200000c4

08001060 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff fff8 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001072:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001088:	4c09      	ldr	r4, [pc, #36]	@ (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f001 fb05 	bl	80026a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fd8f 	bl	8000bbc <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80010a8:	08002730 	.word	0x08002730
  ldr r2, =_sbss
 80010ac:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80010b0:	20000168 	.word	0x20000168

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f923 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff ff38 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f93b 	bl	800137e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f903 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000048 	.word	0x20000048
 800113c:	20000050 	.word	0x20000050
 8001140:	2000004c 	.word	0x2000004c

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000050 	.word	0x20000050
 8001164:	20000164 	.word	0x20000164

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000164 	.word	0x20000164

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4906      	ldr	r1, [pc, #24]	@ (8001214 <__NVIC_EnableIRQ+0x34>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff90 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff2d 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff42 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff35 	bl	80011e0 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	@ 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e161      	b.n	8001670 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8150 	bne.w	800166a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a97      	ldr	r2, [pc, #604]	@ (800162c <HAL_GPIO_Init+0x294>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d05e      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013d4:	4a95      	ldr	r2, [pc, #596]	@ (800162c <HAL_GPIO_Init+0x294>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d875      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013da:	4a95      	ldr	r2, [pc, #596]	@ (8001630 <HAL_GPIO_Init+0x298>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d058      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013e0:	4a93      	ldr	r2, [pc, #588]	@ (8001630 <HAL_GPIO_Init+0x298>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d86f      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013e6:	4a93      	ldr	r2, [pc, #588]	@ (8001634 <HAL_GPIO_Init+0x29c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d052      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013ec:	4a91      	ldr	r2, [pc, #580]	@ (8001634 <HAL_GPIO_Init+0x29c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d869      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013f2:	4a91      	ldr	r2, [pc, #580]	@ (8001638 <HAL_GPIO_Init+0x2a0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d04c      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013f8:	4a8f      	ldr	r2, [pc, #572]	@ (8001638 <HAL_GPIO_Init+0x2a0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d863      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013fe:	4a8f      	ldr	r2, [pc, #572]	@ (800163c <HAL_GPIO_Init+0x2a4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d046      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 8001404:	4a8d      	ldr	r2, [pc, #564]	@ (800163c <HAL_GPIO_Init+0x2a4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d85d      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d82a      	bhi.n	8001464 <HAL_GPIO_Init+0xcc>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d859      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 8001412:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <HAL_GPIO_Init+0x80>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	08001493 	.word	0x08001493
 800141c:	0800146d 	.word	0x0800146d
 8001420:	0800147f 	.word	0x0800147f
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c7 	.word	0x080014c7
 800142c:	080014c7 	.word	0x080014c7
 8001430:	080014c7 	.word	0x080014c7
 8001434:	080014c7 	.word	0x080014c7
 8001438:	080014c7 	.word	0x080014c7
 800143c:	080014c7 	.word	0x080014c7
 8001440:	080014c7 	.word	0x080014c7
 8001444:	080014c7 	.word	0x080014c7
 8001448:	080014c7 	.word	0x080014c7
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014c7 	.word	0x080014c7
 8001454:	080014c7 	.word	0x080014c7
 8001458:	080014c7 	.word	0x080014c7
 800145c:	08001475 	.word	0x08001475
 8001460:	08001489 	.word	0x08001489
 8001464:	4a76      	ldr	r2, [pc, #472]	@ (8001640 <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146a:	e02c      	b.n	80014c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e029      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	3304      	adds	r3, #4
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e024      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	3308      	adds	r3, #8
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e01f      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	330c      	adds	r3, #12
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e01a      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149a:	2304      	movs	r3, #4
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e013      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	611a      	str	r2, [r3, #16]
          break;
 80014b2:	e009      	b.n	80014c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	615a      	str	r2, [r3, #20]
          break;
 80014be:	e003      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          break;
 80014c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	@ 0xff
 80014cc:	d801      	bhi.n	80014d2 <HAL_GPIO_Init+0x13a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_Init+0x13e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d802      	bhi.n	80014e4 <HAL_GPIO_Init+0x14c>
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x152>
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	3b08      	subs	r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	210f      	movs	r1, #15
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	6a39      	ldr	r1, [r7, #32]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80a9 	beq.w	800166a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001518:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a49      	ldr	r2, [pc, #292]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001530:	4a45      	ldr	r2, [pc, #276]	@ (8001648 <HAL_GPIO_Init+0x2b0>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3d      	ldr	r2, [pc, #244]	@ (800164c <HAL_GPIO_Init+0x2b4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1e0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <HAL_GPIO_Init+0x2b8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1dc>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <HAL_GPIO_Init+0x2bc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1d8>
 800156c:	2302      	movs	r3, #2
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001570:	2303      	movs	r3, #3
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001578:	2300      	movs	r3, #0
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <HAL_GPIO_Init+0x2b0>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	492b      	ldr	r1, [pc, #172]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4927      	ldr	r1, [pc, #156]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4921      	ldr	r1, [pc, #132]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	491d      	ldr	r1, [pc, #116]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4917      	ldr	r1, [pc, #92]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01f      	beq.n	800165c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	490d      	ldr	r1, [pc, #52]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e01f      	b.n	800166a <HAL_GPIO_Init+0x2d2>
 800162a:	bf00      	nop
 800162c:	10320000 	.word	0x10320000
 8001630:	10310000 	.word	0x10310000
 8001634:	10220000 	.word	0x10220000
 8001638:	10210000 	.word	0x10210000
 800163c:	10120000 	.word	0x10120000
 8001640:	10110000 	.word	0x10110000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_GPIO_Init+0x2f4>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4909      	ldr	r1, [pc, #36]	@ (800168c <HAL_GPIO_Init+0x2f4>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f ae96 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	372c      	adds	r7, #44	@ 0x2c
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e001      	b.n	80016b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ce:	787b      	ldrb	r3, [r7, #1]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d4:	887a      	ldrh	r2, [r7, #2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43d9      	mvns	r1, r3
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	400b      	ands	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e272      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8087 	beq.w	800184e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001740:	4b92      	ldr	r3, [pc, #584]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b04      	cmp	r3, #4
 800174a:	d00c      	beq.n	8001766 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800174c:	4b8f      	ldr	r3, [pc, #572]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d112      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
 8001758:	4b8c      	ldr	r3, [pc, #560]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d10b      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4b89      	ldr	r3, [pc, #548]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d06c      	beq.n	800184c <HAL_RCC_OscConfig+0x12c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d168      	bne.n	800184c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e24c      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x76>
 8001788:	4b80      	ldr	r3, [pc, #512]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a7f      	ldr	r2, [pc, #508]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e02e      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b7b      	ldr	r3, [pc, #492]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7a      	ldr	r2, [pc, #488]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b78      	ldr	r3, [pc, #480]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a77      	ldr	r2, [pc, #476]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0xbc>
 80017c2:	4b72      	ldr	r3, [pc, #456]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a71      	ldr	r2, [pc, #452]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6f      	ldr	r3, [pc, #444]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017dc:	4b6b      	ldr	r3, [pc, #428]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a67      	ldr	r2, [pc, #412]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fcb4 	bl	8001168 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fcb0 	bl	8001168 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e200      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5d      	ldr	r3, [pc, #372]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xe4>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fca0 	bl	8001168 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc9c 	bl	8001168 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1ec      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b53      	ldr	r3, [pc, #332]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x10c>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001866:	4b49      	ldr	r3, [pc, #292]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b43      	ldr	r3, [pc, #268]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4939      	ldr	r1, [pc, #228]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc55 	bl	8001168 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc51 	bl	8001168 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4927      	ldr	r1, [pc, #156]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc34 	bl	8001168 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fc30 	bl	8001168 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e180      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03a      	beq.n	80019a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_RCC_OscConfig+0x274>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff fc14 	bl	8001168 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc10 	bl	8001168 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e160      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f000 fa9c 	bl	8001ea0 <RCC_Delay>
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_RCC_OscConfig+0x274>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fbfa 	bl	8001168 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001976:	e00f      	b.n	8001998 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fbf6 	bl	8001168 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d908      	bls.n	8001998 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e146      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	42420000 	.word	0x42420000
 8001994:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b92      	ldr	r3, [pc, #584]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e9      	bne.n	8001978 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a6 	beq.w	8001afe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10d      	bne.n	80019de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b88      	ldr	r3, [pc, #544]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a87      	ldr	r2, [pc, #540]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b82      	ldr	r3, [pc, #520]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7e      	ldr	r2, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fbb7 	bl	8001168 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff fbb3 	bl	8001168 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	@ 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e103      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b75      	ldr	r3, [pc, #468]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x312>
 8001a24:	4b6f      	ldr	r3, [pc, #444]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e02d      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x334>
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a69      	ldr	r2, [pc, #420]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b67      	ldr	r3, [pc, #412]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a66      	ldr	r2, [pc, #408]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	e01c      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x356>
 8001a5c:	4b61      	ldr	r3, [pc, #388]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a60      	ldr	r2, [pc, #384]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a76:	4b5b      	ldr	r3, [pc, #364]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6213      	str	r3, [r2, #32]
 8001a82:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a57      	ldr	r2, [pc, #348]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d015      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fb67 	bl	8001168 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fb63 	bl	8001168 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0b1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ee      	beq.n	8001a9e <HAL_RCC_OscConfig+0x37e>
 8001ac0:	e014      	b.n	8001aec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb51 	bl	8001168 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb4d 	bl	8001168 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e09b      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d061      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d146      	bne.n	8001baa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fb21 	bl	8001168 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff fb1d 	bl	8001168 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e06d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d108      	bne.n	8001b64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4921      	ldr	r1, [pc, #132]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a19      	ldr	r1, [r3, #32]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	430b      	orrs	r3, r1
 8001b76:	491b      	ldr	r1, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff faf1 	bl	8001168 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff faed 	bl	8001168 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e03d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46a>
 8001ba8:	e035      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fada 	bl	8001168 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff fad6 	bl	8001168 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e026      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x498>
 8001bd6:	e01e      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e019      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_OscConfig+0x500>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d0      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b6a      	ldr	r3, [pc, #424]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b67      	ldr	r3, [pc, #412]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4965      	ldr	r1, [pc, #404]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d040      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e073      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4936      	ldr	r1, [pc, #216]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fa28 	bl	8001168 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff fa24 	bl	8001168 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e053      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d210      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4922      	ldr	r1, [pc, #136]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	@ (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f986 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08002704 	.word	0x08002704
 8001df0:	20000048 	.word	0x20000048
 8001df4:	2000004c 	.word	0x2000004c

08001df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x30>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x36>
 8001e26:	e027      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0c5b      	lsrs	r3, r3, #17
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	613b      	str	r3, [r7, #16]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7a:	613b      	str	r3, [r7, #16]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	693b      	ldr	r3, [r7, #16]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	08002714 	.word	0x08002714
 8001e98:	08002724 	.word	0x08002724
 8001e9c:	003d0900 	.word	0x003d0900

08001ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <RCC_Delay+0x34>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <RCC_Delay+0x38>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0a5b      	lsrs	r3, r3, #9
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ebc:	bf00      	nop
  }
  while (Delay --);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <RCC_Delay+0x1c>
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000048 	.word	0x20000048
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff f852 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 fa56 	bl	80023cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d001      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e035      	b.n	8002000 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_TIM_Base_Start_IT+0x90>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0x4e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d004      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0x4e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <HAL_TIM_Base_Start_IT+0x94>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d111      	bne.n	8001fee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d010      	beq.n	8001ffe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	e007      	b.n	8001ffe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d020      	beq.n	8002078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0202 	mvn.w	r2, #2
 8002048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f998 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f98b 	bl	8002382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f99a 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d020      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0204 	mvn.w	r2, #4
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f972 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f965 	bl	8002382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f974 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d020      	beq.n	8002110 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0208 	mvn.w	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f94c 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f93f 	bl	8002382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f94e 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f926 	bl	8002394 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f919 	bl	8002382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f928 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0201 	mvn.w	r2, #1
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fe68 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa6f 	bl	8002682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8f8 	bl	80023b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0220 	mvn.w	r2, #32
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa42 	bl	8002670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_TIM_ConfigClockSource+0x1c>
 800220c:	2302      	movs	r3, #2
 800220e:	e0b4      	b.n	800237a <HAL_TIM_ConfigClockSource+0x186>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800222e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002248:	d03e      	beq.n	80022c8 <HAL_TIM_ConfigClockSource+0xd4>
 800224a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800224e:	f200 8087 	bhi.w	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002256:	f000 8086 	beq.w	8002366 <HAL_TIM_ConfigClockSource+0x172>
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225e:	d87f      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b70      	cmp	r3, #112	@ 0x70
 8002262:	d01a      	beq.n	800229a <HAL_TIM_ConfigClockSource+0xa6>
 8002264:	2b70      	cmp	r3, #112	@ 0x70
 8002266:	d87b      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b60      	cmp	r3, #96	@ 0x60
 800226a:	d050      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x11a>
 800226c:	2b60      	cmp	r3, #96	@ 0x60
 800226e:	d877      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b50      	cmp	r3, #80	@ 0x50
 8002272:	d03c      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0xfa>
 8002274:	2b50      	cmp	r3, #80	@ 0x50
 8002276:	d873      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002278:	2b40      	cmp	r3, #64	@ 0x40
 800227a:	d058      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x13a>
 800227c:	2b40      	cmp	r3, #64	@ 0x40
 800227e:	d86f      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002280:	2b30      	cmp	r3, #48	@ 0x30
 8002282:	d064      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x15a>
 8002284:	2b30      	cmp	r3, #48	@ 0x30
 8002286:	d86b      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002288:	2b20      	cmp	r3, #32
 800228a:	d060      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x15a>
 800228c:	2b20      	cmp	r3, #32
 800228e:	d867      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d05c      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x15a>
 8002294:	2b10      	cmp	r3, #16
 8002296:	d05a      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x15a>
 8002298:	e062      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	f000 f96a 	bl	8002582 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	609a      	str	r2, [r3, #8]
      break;
 80022c6:	e04f      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022d8:	f000 f953 	bl	8002582 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ea:	609a      	str	r2, [r3, #8]
      break;
 80022ec:	e03c      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fa:	461a      	mov	r2, r3
 80022fc:	f000 f8ca 	bl	8002494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2150      	movs	r1, #80	@ 0x50
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f921 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800230c:	e02c      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800231a:	461a      	mov	r2, r3
 800231c:	f000 f8e8 	bl	80024f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2160      	movs	r1, #96	@ 0x60
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f911 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800232c:	e01c      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800233a:	461a      	mov	r2, r3
 800233c:	f000 f8aa 	bl	8002494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2140      	movs	r1, #64	@ 0x40
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f901 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800234c:	e00c      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f000 f8f8 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 800235e:	e003      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e000      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a2b      	ldr	r2, [pc, #172]	@ (800248c <TIM_Base_SetConfig+0xc0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x28>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x28>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a28      	ldr	r2, [pc, #160]	@ (8002490 <TIM_Base_SetConfig+0xc4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a20      	ldr	r2, [pc, #128]	@ (800248c <TIM_Base_SetConfig+0xc0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0x52>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0x52>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1d      	ldr	r2, [pc, #116]	@ (8002490 <TIM_Base_SetConfig+0xc4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d108      	bne.n	8002430 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <TIM_Base_SetConfig+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f023 0201 	bic.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
  }
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400

08002494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f023 0201 	bic.w	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f023 030a 	bic.w	r3, r3, #10
 80024d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0210 	bic.w	r2, r3, #16
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800251a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	031b      	lsls	r3, r3, #12
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800252c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	f043 0307 	orr.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002582:	b480      	push	{r7}
 8002584:	b087      	sub	sp, #28
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800259c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e041      	b.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002624:	d004      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10c      	bne.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400

08002670 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <memset>:
 8002694:	4603      	mov	r3, r0
 8002696:	4402      	add	r2, r0
 8002698:	4293      	cmp	r3, r2
 800269a:	d100      	bne.n	800269e <memset+0xa>
 800269c:	4770      	bx	lr
 800269e:	f803 1b01 	strb.w	r1, [r3], #1
 80026a2:	e7f9      	b.n	8002698 <memset+0x4>

080026a4 <__libc_init_array>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	2600      	movs	r6, #0
 80026a8:	4d0c      	ldr	r5, [pc, #48]	@ (80026dc <__libc_init_array+0x38>)
 80026aa:	4c0d      	ldr	r4, [pc, #52]	@ (80026e0 <__libc_init_array+0x3c>)
 80026ac:	1b64      	subs	r4, r4, r5
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	42a6      	cmp	r6, r4
 80026b2:	d109      	bne.n	80026c8 <__libc_init_array+0x24>
 80026b4:	f000 f81a 	bl	80026ec <_init>
 80026b8:	2600      	movs	r6, #0
 80026ba:	4d0a      	ldr	r5, [pc, #40]	@ (80026e4 <__libc_init_array+0x40>)
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <__libc_init_array+0x44>)
 80026be:	1b64      	subs	r4, r4, r5
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	42a6      	cmp	r6, r4
 80026c4:	d105      	bne.n	80026d2 <__libc_init_array+0x2e>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026cc:	4798      	blx	r3
 80026ce:	3601      	adds	r6, #1
 80026d0:	e7ee      	b.n	80026b0 <__libc_init_array+0xc>
 80026d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d6:	4798      	blx	r3
 80026d8:	3601      	adds	r6, #1
 80026da:	e7f2      	b.n	80026c2 <__libc_init_array+0x1e>
 80026dc:	08002728 	.word	0x08002728
 80026e0:	08002728 	.word	0x08002728
 80026e4:	08002728 	.word	0x08002728
 80026e8:	0800272c 	.word	0x0800272c

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
